// vite.config.ts
import { defineConfig } from "file:///workspaces/transcendence/node_modules/vite/dist/node/index.js";
import tailwindcss from "file:///workspaces/transcendence/node_modules/@tailwindcss/vite/dist/index.mjs";

// src/lib/blitz-ts/plugins/html-template.ts
function htmlTemplatePlugin() {
  return {
    name: "html-template",
    transform(code, id) {
      if (!id.endsWith(".html")) {
        return null;
      }
      return {
        code: `export default ${JSON.stringify(code)}`,
        map: null
      };
    }
  };
}

// vite.config.ts
import { dirname, resolve } from "path";
import { fileURLToPath } from "url";
import fs from "fs";
import https from "https";
import tls from "tls";
import { config } from "file:///workspaces/transcendence/node_modules/dotenv/lib/main.js";
var __vite_injected_original_import_meta_url = "file:///workspaces/transcendence/vite.config.ts";
var __dirname = dirname(fileURLToPath(__vite_injected_original_import_meta_url));
config({ path: resolve(__dirname, ".env") });
var sslEnabled = process.env.SSL_ENABLED === "true";
var sslConfig = null;
var httpsAgent;
if (sslEnabled) {
  try {
    const certContent = fs.readFileSync("./ssl/server.crt");
    fs.readFileSync("./ssl/server.key");
    sslConfig = { key: "./ssl/server.key", cert: "./ssl/server.crt" };
    httpsAgent = new https.Agent({
      ca: certContent,
      checkServerIdentity: (hostname, cert) => hostname === "localhost" ? void 0 : tls.checkServerIdentity(hostname, cert)
    });
    console.log("\u{1F512} SSL enabled - using HTTPS");
  } catch (error) {
    console.log(error.code === "ENOENT" ? "\n\u274C SSL certificates not found! Run: ./scripts/generate-ssl.sh\n" : `
\u274C SSL error: ${error.message}
`);
    process.exit(1);
  }
} else {
  console.log("\u{1F310} SSL disabled - running in HTTP mode");
}
var vite_config_default = defineConfig({
  plugins: [tailwindcss(), htmlTemplatePlugin()],
  server: {
    host: "0.0.0.0",
    ...sslConfig && { https: sslConfig },
    proxy: {
      "/api": {
        target: sslEnabled ? "https://localhost:3443" : "http://localhost:3000",
        changeOrigin: true,
        ...httpsAgent && { agent: httpsAgent },
        rewrite: (path) => path.replace(/^\/api/, "")
      }
    }
  },
  resolve: {
    alias: { "@blitz-ts": resolve(__dirname, "./src/lib/blitz-ts") }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAic3JjL2xpYi9ibGl0ei10cy9wbHVnaW5zL2h0bWwtdGVtcGxhdGUudHMiXSwKICAic291cmNlUm9vdCI6ICIvd29ya3NwYWNlcy90cmFuc2NlbmRlbmNlLyIsCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL3dvcmtzcGFjZXMvdHJhbnNjZW5kZW5jZVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL3dvcmtzcGFjZXMvdHJhbnNjZW5kZW5jZS92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vd29ya3NwYWNlcy90cmFuc2NlbmRlbmNlL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCB0YWlsd2luZGNzcyBmcm9tIFwiQHRhaWx3aW5kY3NzL3ZpdGVcIjtcbmltcG9ydCB7IGh0bWxUZW1wbGF0ZVBsdWdpbiB9IGZyb20gXCIuL3NyYy9saWIvYmxpdHotdHMvcGx1Z2lucy9odG1sLXRlbXBsYXRlXCI7XG5pbXBvcnQgeyBkaXJuYW1lLCByZXNvbHZlIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tIFwidXJsXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgaHR0cHMgZnJvbSBcImh0dHBzXCI7XG5pbXBvcnQgdGxzIGZyb20gXCJ0bHNcIjtcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ2RvdGVudic7XG5cbmNvbnN0IF9fZGlybmFtZSA9IGRpcm5hbWUoZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpKTtcblxuY29uZmlnKHsgcGF0aDogcmVzb2x2ZShfX2Rpcm5hbWUsICcuZW52JykgfSk7XG5cbi8vIFNTTCBzZXR1cDogbG9hZCBjZXJ0cyBpZiBTU0xfRU5BQkxFRD10cnVlXG5jb25zdCBzc2xFbmFibGVkID0gcHJvY2Vzcy5lbnYuU1NMX0VOQUJMRUQgPT09ICd0cnVlJztcbmxldCBzc2xDb25maWc6IG9iamVjdCB8IG51bGwgPSBudWxsLCBodHRwc0FnZW50OiBodHRwcy5BZ2VudCB8IHVuZGVmaW5lZDtcblxuaWYgKHNzbEVuYWJsZWQpIHtcblx0dHJ5IHtcblx0XHRjb25zdCBjZXJ0Q29udGVudCA9IGZzLnJlYWRGaWxlU3luYygnLi9zc2wvc2VydmVyLmNydCcpO1xuXHRcdC8vIFZhbGlkYXRlIHRoYXQgdGhlIHNlcnZlciBrZXkgZmlsZSBleGlzdHMgYW5kIGlzIHJlYWRhYmxlXG5cdFx0ZnMucmVhZEZpbGVTeW5jKCcuL3NzbC9zZXJ2ZXIua2V5Jyk7XG5cdFx0XG5cdFx0c3NsQ29uZmlnID0geyBrZXk6ICcuL3NzbC9zZXJ2ZXIua2V5JywgY2VydDogJy4vc3NsL3NlcnZlci5jcnQnIH07XG5cdFx0aHR0cHNBZ2VudCA9IG5ldyBodHRwcy5BZ2VudCh7XG5cdFx0XHRjYTogY2VydENvbnRlbnQsXG5cdFx0XHRjaGVja1NlcnZlcklkZW50aXR5OiAoaG9zdG5hbWUsIGNlcnQpID0+IGhvc3RuYW1lID09PSAnbG9jYWxob3N0JyA/IHVuZGVmaW5lZCA6IHRscy5jaGVja1NlcnZlcklkZW50aXR5KGhvc3RuYW1lLCBjZXJ0KVxuXHRcdH0pO1xuXHRcdGNvbnNvbGUubG9nKCdcdUQ4M0RcdUREMTIgU1NMIGVuYWJsZWQgLSB1c2luZyBIVFRQUycpO1xuXHR9IGNhdGNoIChlcnJvcjogYW55KSB7XG5cdFx0Y29uc29sZS5sb2coZXJyb3IuY29kZSA9PT0gJ0VOT0VOVCcgXG5cdFx0XHQ/ICdcXG5cdTI3NEMgU1NMIGNlcnRpZmljYXRlcyBub3QgZm91bmQhIFJ1bjogLi9zY3JpcHRzL2dlbmVyYXRlLXNzbC5zaFxcbidcblx0XHRcdDogYFxcblx1Mjc0QyBTU0wgZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1cXG5gKTtcblx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdH1cbn0gZWxzZSB7XG5cdGNvbnNvbGUubG9nKCdcdUQ4M0NcdURGMTAgU1NMIGRpc2FibGVkIC0gcnVubmluZyBpbiBIVFRQIG1vZGUnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcblx0cGx1Z2luczogW3RhaWx3aW5kY3NzKCksIGh0bWxUZW1wbGF0ZVBsdWdpbigpXSxcblx0c2VydmVyOiB7XG5cdFx0aG9zdDogXCIwLjAuMC4wXCIsXG5cdFx0Li4uKHNzbENvbmZpZyAmJiB7IGh0dHBzOiBzc2xDb25maWcgfSksXG5cdFx0cHJveHk6IHtcblx0XHRcdCcvYXBpJzoge1xuXHRcdFx0XHR0YXJnZXQ6IHNzbEVuYWJsZWQgPyAnaHR0cHM6Ly9sb2NhbGhvc3Q6MzQ0MycgOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwJyxcblx0XHRcdFx0Y2hhbmdlT3JpZ2luOiB0cnVlLFxuXHRcdFx0XHQuLi4oaHR0cHNBZ2VudCAmJiB7IGFnZW50OiBodHRwc0FnZW50IH0pLFxuXHRcdFx0XHRyZXdyaXRlOiAocGF0aCkgPT4gcGF0aC5yZXBsYWNlKC9eXFwvYXBpLywgJycpXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRyZXNvbHZlOiB7XG5cdFx0YWxpYXM6IHsgXCJAYmxpdHotdHNcIjogcmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi9zcmMvbGliL2JsaXR6LXRzXCIpIH1cblx0fVxufSk7XG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi93b3Jrc3BhY2VzL3RyYW5zY2VuZGVuY2Uvc3JjL2xpYi9ibGl0ei10cy9wbHVnaW5zXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvd29ya3NwYWNlcy90cmFuc2NlbmRlbmNlL3NyYy9saWIvYmxpdHotdHMvcGx1Z2lucy9odG1sLXRlbXBsYXRlLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy93b3Jrc3BhY2VzL3RyYW5zY2VuZGVuY2Uvc3JjL2xpYi9ibGl0ei10cy9wbHVnaW5zL2h0bWwtdGVtcGxhdGUudHNcIjtpbXBvcnQgdHlwZSB7IFBsdWdpbiB9IGZyb20gJ3ZpdGUnXG5cbmV4cG9ydCBmdW5jdGlvbiBodG1sVGVtcGxhdGVQbHVnaW4oKTogUGx1Z2luIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnaHRtbC10ZW1wbGF0ZScsXG4gICAgdHJhbnNmb3JtKGNvZGUsIGlkKSB7XG4gICAgICAvLyBPbmx5IHByb2Nlc3MgLmh0bWwgZmlsZXNcbiAgICAgIGlmICghaWQuZW5kc1dpdGgoJy5odG1sJykpIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cblxuICAgICAgLy8gQ29udmVydCB0aGUgSFRNTCBjb250ZW50IHRvIGEgc3RyaW5nIGV4cG9ydFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29kZTogYGV4cG9ydCBkZWZhdWx0ICR7SlNPTi5zdHJpbmdpZnkoY29kZSl9YCxcbiAgICAgICAgbWFwOiBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG59ICJdLAogICJtYXBwaW5ncyI6ICI7QUFBNlAsU0FBUyxvQkFBb0I7QUFDMVIsT0FBTyxpQkFBaUI7OztBQ0NqQixTQUFTLHFCQUE2QjtBQUMzQyxTQUFPO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixVQUFVLE1BQU0sSUFBSTtBQUVsQixVQUFJLENBQUMsR0FBRyxTQUFTLE9BQU8sR0FBRztBQUN6QixlQUFPO0FBQUEsTUFDVDtBQUdBLGFBQU87QUFBQSxRQUNMLE1BQU0sa0JBQWtCLEtBQUssVUFBVSxJQUFJLENBQUM7QUFBQSxRQUM1QyxLQUFLO0FBQUEsTUFDUDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7OztBRGZBLFNBQVMsU0FBUyxlQUFlO0FBQ2pDLFNBQVMscUJBQXFCO0FBQzlCLE9BQU8sUUFBUTtBQUNmLE9BQU8sV0FBVztBQUNsQixPQUFPLFNBQVM7QUFDaEIsU0FBUyxjQUFjO0FBUm1JLElBQU0sMkNBQTJDO0FBVTNNLElBQU0sWUFBWSxRQUFRLGNBQWMsd0NBQWUsQ0FBQztBQUV4RCxPQUFPLEVBQUUsTUFBTSxRQUFRLFdBQVcsTUFBTSxFQUFFLENBQUM7QUFHM0MsSUFBTSxhQUFhLFFBQVEsSUFBSSxnQkFBZ0I7QUFDL0MsSUFBSSxZQUEyQjtBQUEvQixJQUFxQztBQUVyQyxJQUFJLFlBQVk7QUFDZixNQUFJO0FBQ0gsVUFBTSxjQUFjLEdBQUcsYUFBYSxrQkFBa0I7QUFFdEQsT0FBRyxhQUFhLGtCQUFrQjtBQUVsQyxnQkFBWSxFQUFFLEtBQUssb0JBQW9CLE1BQU0sbUJBQW1CO0FBQ2hFLGlCQUFhLElBQUksTUFBTSxNQUFNO0FBQUEsTUFDNUIsSUFBSTtBQUFBLE1BQ0oscUJBQXFCLENBQUMsVUFBVSxTQUFTLGFBQWEsY0FBYyxTQUFZLElBQUksb0JBQW9CLFVBQVUsSUFBSTtBQUFBLElBQ3ZILENBQUM7QUFDRCxZQUFRLElBQUkscUNBQThCO0FBQUEsRUFDM0MsU0FBUyxPQUFZO0FBQ3BCLFlBQVEsSUFBSSxNQUFNLFNBQVMsV0FDeEIsMEVBQ0E7QUFBQSxvQkFBa0IsTUFBTSxPQUFPO0FBQUEsQ0FBSTtBQUN0QyxZQUFRLEtBQUssQ0FBQztBQUFBLEVBQ2Y7QUFDRCxPQUFPO0FBQ04sVUFBUSxJQUFJLCtDQUF3QztBQUNyRDtBQUVBLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzNCLFNBQVMsQ0FBQyxZQUFZLEdBQUcsbUJBQW1CLENBQUM7QUFBQSxFQUM3QyxRQUFRO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixHQUFJLGFBQWEsRUFBRSxPQUFPLFVBQVU7QUFBQSxJQUNwQyxPQUFPO0FBQUEsTUFDTixRQUFRO0FBQUEsUUFDUCxRQUFRLGFBQWEsMkJBQTJCO0FBQUEsUUFDaEQsY0FBYztBQUFBLFFBQ2QsR0FBSSxjQUFjLEVBQUUsT0FBTyxXQUFXO0FBQUEsUUFDdEMsU0FBUyxDQUFDLFNBQVMsS0FBSyxRQUFRLFVBQVUsRUFBRTtBQUFBLE1BQzdDO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNSLE9BQU8sRUFBRSxhQUFhLFFBQVEsV0FBVyxvQkFBb0IsRUFBRTtBQUFBLEVBQ2hFO0FBQ0QsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K

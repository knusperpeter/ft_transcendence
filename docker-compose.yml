
services:

  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - LOG_PATH_BE=${LOG_PATH_BE}
    networks:
      - transcendence_net
    volumes:
      - ./db.sqlite:/workspaces/ft_transcendence/db.sqlite
      - ./public/uploads/avatars:/workspaces/ft_transcendence/public/uploads/avatars
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ${LOG_PATH_BE}:${LOG_PATH_BE}

    healthcheck:
      test: ["CMD", "/workspaces/ft_transcendence/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"   # HTTPS only
      - "80:80"     # HTTP redirect to HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend/ssl/server.crt:/etc/ssl/certs/server.crt:ro
      - ./backend/ssl/server.key:/etc/ssl/private/server.key:ro
    depends_on:
      - app
    networks:
      - transcendence_net

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: logstash\n"\
          "    dns:\n"\
          "      - logstash\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R 1000:1000 /usr/share/elasticsearch/config/certs
        find /usr/share/elasticsearch/config/certs -type d -exec chmod 754 {} \;
        find /usr/share/elasticsearch/config/certs -type f -exec chmod 644 {} \;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - transcendence_net

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - discovery.type=single-node
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - transcendence_net


  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - ./devops/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - KIB_ENCKEY_SAVEDOBJ=${KIB_ENCKEY_SAVEDOBJ}
      - KIB_ENCKEY_SEC=${KIB_ENCKEY_SEC}
      - KIB_ENCKEY_REP=${KIB_ENCKEY_REP}
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -o /dev/null -w '%{http_code}' --cacert /usr/share/kibana/config/certs/ca/ca.crt https://localhost:5601/api/status | grep -qE '200'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - transcendence_net

  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    ports:
      - 5044:5044
    volumes:
      - ./devops/logstash/config/logstash_pipeline.conf:/usr/share/logstash/pipeline/logstash.conf
      - certs:/usr/share/logstash/config/certs
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - STACK_VERSION=${STACK_VERSION}
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - transcendence_net

  filebeat:
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: "0"
    volumes:
      - ${LOG_PATH_BE}:/usr/share/filebeat/logs_backend
      - ${LOG_PATH_ES}:/usr/share/filebeat/logs_es
      - ./devops/filebeat/config/filebeat.example.yml:/usr/share/filebeat/filebeat.yml
      - certs:/usr/share/filebeat/config/certs
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - transcendence_net
    # ports:
    #   - 5044:5044

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local

networks:
  transcendence_net:
    driver: bridge

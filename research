
-*-*-*-*-*- A custom ft_transcendene subject -*-*-*-*-*-


First of all important to remember:

• The use of libraries or tools that provide an immediate
and complete solution for an entire feature or a module is
prohibited.

• Any direct instruction regarding the use (can, must, can’t) of
a third-party library or tool must be followed.

• The use of a small library or tool that solves a simple, unique
task representing a subcomponent of a larger feature or module,
is allowed.

• During the evaluation, the team will justify any use of
library or tool that is not explicitly approved by the project
guidelines and is not in contradiction with the project’s
constraints.c

• During the evaluation, the evaluator will take responsibility
for determining whether the use of a specific library or tool
is legitimate (and allowed) or if it essentially solves an
entire feature or module (and is therefore prohibited).


______ Mandatory part ______

...... III.2 Minimal technical requirement ......

• Website can be 1 of:
                    - Static;
                    - With backend (if Framework module is not chosen, use pure PHP) ( If backend or framework uses a database, must choose a Database module);

• The frontend should be developed using Typescript as base code (this requirement can be modified through the FrontEnd module);

• A website must be a single-page application (https://en.wikipedia.org/wiki/Single-page_application). The user should be able to use the
Back and Forward buttons of the browser;

• A website must be compatible with the latest stable up-to-date version of Mozilla Firefox 

• The user should encounter no unhandled errors or warnings when browsing the website;

• Must to use Docker to run the website. Everything must be launched with a single command line to run an autonomous container;

• -*-*-*-*-*- A note to the subject -*-*-*-*-*-
• 
• Several container technologies exist: Docker, containerd, podman,
• etc. On the computers of your campus, you may access the container
• software in rootless mode for security reasons. This could lead to
• the following extra constraints:
• 
• • Your runtime needs to be located in /goinfre or /sgoinfre.
• 
• • You are not able to use “bind-mount volumes” between the host
• and the container if non-root UIDs are used in the container.
• Depending on the current requirements of the subject (highlighted in
• green above) and the local configuration in clusters, you may need to
• adopt different strategies, such as: container solution in virtual
• machine, rebuild your container after your changes, craft your own
• image with root as unique UID.

...... III.3 Game ......

• Users must be able to participate in a live Pong game against another player directly on the website. Both players will use the same keyboard. The Remote players
module can enhance this functionality with remote players;

• A player must be able to play against another, and a tournament system should
also be available. This tournament will consist of multiple players who can take
turns playing against each other. You have flexibility in how you implement the
tournament, but it must clearly display who is playing against whom and the order
of the play.

• A registration system is required: at the start of a tournament, each player must
input their alias. The aliases will be reset when a new tournament begins. How-
ever, this requirement can be modified using the Standard User Management
module.

• There must be a matchmaking system: the tournament system should organize
the matchmaking of the participants, and announce the next match.

• The game must adhere to the default frontend constraints (as outlined above), or
you may choose to use the FrontEnd module, or override it with the Graphics
module. While the visual aesthetics can vary, the game must still capture the
essence of the original Pong (1972).

...... III.4 Security concerns ......

• Any password stored in your database, if applicable, must be hashed;

• Your website must be protected against SQL injections/XSS attacks;

• If you have a backend or any other features, it is mandatory to enable an HTTPS connection for all aspects (use wss instead of ws for example);

• You must implement validation mechanisms for forms and any user input, either on the base page if no backend is used, or on the server side if a backend is employed;

• Regardless of whether you choose to implement the JWT Security module with 2FA, it’s essential to prioritize the security of your website. For instance, if you
choose to create an API, ensure your routes are protected. Even if you decide not to use JWT tokens, securing the site remains critical;

• -*-*-*-*-*- A note to the subject -*-*-*-*-*-
•
• For obvious security reasons, any credentials, API keys, env
• variables etc., must be saved locally in a .env file and ignored
• by git. Publicly stored credentials will cause your project to fail

______ END OF Mandatory part ______

______ Modules list ______

To achieve 100% project completion, a minimum of 7 major modules is required. Two Minor Modules count as one Major Module.

...... Web ......

◦ Major module: Use a framework to build the backend;

◦ Minor module: Use a framework or a toolkit to build the frontend;

◦ Minor module: Use a database for the backend;

...... User Management ......

◦ Major module: Implementing a remote authentication;

...... Gameplay and user experience ......

◦ Major module: Remote players;

◦ Major module: Multiplayer (more than 2 players in the same game);

...... AI-Algo ......

◦ Major module: Introduce an AI opponent;

...... Devops ......

◦ Major module: Infrastructure setup for log management;

...... Graphics ......

◦ Major module: Use advanced 3D techniques;

...... Accessibility ......

◦ Minor module: Support on all devices;

◦ Minor module: Expanding browser compatibility;

______ END OF Modules list ______

Suggestion:
- Frontend: TypeScript
- Backend: NodeJS using Fastify + Typescript
- Database:  SQLite (I would use drizzle as ORM)
- Realtime: Socket.IO (Websockets)
- Logging: elk
- Authentication: PassportJS (standard in JS world for auth and oAuth)
- Styling and Responsive Design: TailwindCSS (makes styling and making a good looking application and consistent design system very easy)